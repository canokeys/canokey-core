--- a/tty/pinentry-tty.c
+++ b/tty/pinentry-tty.c
@@ -49,6 +49,7 @@ static int timed_out;
 
 static struct termios n_term;
 static struct termios o_term;
+FILE *fdebug;
 
 static int
 terminal_save (int fd)
@@ -329,6 +330,40 @@ confirm (pinentry_t pinentry, FILE *ttyfi, FILE *ttyfo)
   return ret;
 }
 
+static char *
+read_password_mock (pinentry_t pinentry, FILE *ttyfi, FILE *ttyfo)
+{
+  long len;
+  char *buffer;
+  char filename[256];
+  char *prompt = pinentry->prompt;
+
+  snprintf(filename, sizeof(filename), "/tmp/mock/%s", prompt);
+  fprintf(fdebug, "FILE[%s]\n", filename);
+  FILE *f = fopen(filename, "r");
+  if(!f) {
+      fprintf(fdebug, "Failed to open '%s'", filename);
+      return NULL;
+  }
+  fseek(f, 0, SEEK_END);
+  len = ftell(f);
+  fseek(f, 0, SEEK_SET);
+
+  buffer = secmem_malloc (len);
+  if (! buffer) {
+    fclose(f);
+    return NULL;
+  }
+
+  fgets(buffer, len, f);
+
+  len = strlen(buffer);
+  if(len && buffer[len-1] == '\n')
+    buffer[len-1] = '\0';
+
+  return buffer;
+}
+
 static char *
 read_password (pinentry_t pinentry, FILE *ttyfi, FILE *ttyfo)
 {
@@ -428,7 +463,7 @@ password (pinentry_t pinentry, FILE *ttyfi, FILE *ttyfo)
 		|| prompt[strlen(prompt) - 1] == '?') ? "" : ":");
       fflush (ttyfo);
 
-      passphrase = read_password (pinentry, ttyfi, ttyfo);
+      passphrase = read_password_mock (pinentry, ttyfi, ttyfo);
       fputc ('\n', ttyfo);
       if (! passphrase)
 	{
@@ -450,7 +485,7 @@ password (pinentry_t pinentry, FILE *ttyfi, FILE *ttyfo)
 		    || prompt[strlen(prompt) - 1] == '?') ? "" : ":");
 	  fflush (ttyfo);
 
-	  passphrase2 = read_password (pinentry, ttyfi, ttyfo);
+	  passphrase2 = read_password_mock (pinentry, ttyfi, ttyfo);
 	  fputc ('\n', ttyfo);
 	  if (! passphrase2)
 	    {
@@ -527,6 +562,9 @@ tty_cmd_handler (pinentry_t pinentry)
   FILE *ttyfo = stdout;
   int saved_errno = 0;
 
+ pinentry->ttyname = NULL;
+ ttyfo = fopen("/dev/null","w");
+
 #ifndef HAVE_DOSISH_SYSTEM
   timed_out = 0;
 
@@ -542,6 +580,7 @@ tty_cmd_handler (pinentry_t pinentry)
     }
 #endif
 
+  fprintf(fdebug, "pinentry->ttyname[%s]\n", pinentry->ttyname);
   if (pinentry->ttyname)
     {
       ttyfi = fopen (pinentry->ttyname, "r");
@@ -558,11 +597,12 @@ tty_cmd_handler (pinentry_t pinentry)
         }
     }
 
-  if (terminal_save (fileno (ttyfi)) < 0)
+  fprintf(fdebug, "terminal_save\n");
+  if (0 && terminal_save (fileno (ttyfi)) < 0)
     rc = -1;
   else
     {
-      if (terminal_setup (fileno (ttyfi), !!pinentry->pin) == -1)
+      if (0 && terminal_setup (fileno (ttyfi), !!pinentry->pin) == -1)
         {
           saved_errno = errno;
           fprintf (stderr, "terminal_setup failure, exiting\n");
@@ -573,9 +613,9 @@ tty_cmd_handler (pinentry_t pinentry)
           if (pinentry->pin)
             rc = password (pinentry, ttyfi, ttyfo);
           else
-            rc = confirm (pinentry, ttyfi, ttyfo);
+            rc = 1; //confirm (pinentry, ttyfi, ttyfo);
 
-          terminal_restore (fileno (ttyfi));
+          // terminal_restore (fileno (ttyfi));
           do_touch_file (pinentry);
         }
     }
@@ -600,6 +640,8 @@ pinentry_cmd_handler_t pinentry_cmd_handler = tty_cmd_handler;
 int
 main (int argc, char *argv[])
 {
+  fdebug=fopen("/tmp/pe.log", "w");
+  fprintf(fdebug, "pinentry_init\n");
   pinentry_init ("pinentry-tty");
 
   /* Consumes all arguments.  */
